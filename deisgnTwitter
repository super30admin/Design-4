class Twitter {
    
    class Tweet{
        int tweetId;
        int createdAt;
        
        Tweet(int tweetId,int createdAt){
            this.tweetId =tweetId;
            this.createdAt = createdAt;
        }
    }
    
    HashMap<Integer,Set<Integer>> followed;       //user following other  users                                                                 
    HashMap<Integer,List<Tweet>> tweets;        //userId and it's tweets
    int time;                                   //whenever a tweet is posted, it is incremented by 1

    /** Initialize your data structure here. */
    public Twitter() {
        followed = new HashMap<>(); 
        tweets = new HashMap<>();
        
        
    }
    
    /** Compose a new tweet. */
    public void postTweet(int userId, int tweetId) {
        follow(userId,userId);  //following own user
       
        if(!tweets.containsKey(userId))
        tweets.put(userId,new ArrayList<>());
        
        tweets.get(userId).add( new Tweet(tweetId,time++));
        
        
        
    }
    
    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
    public List<Integer> getNewsFeed(int userId) {
        
        PriorityQueue<Tweet> pq = new PriorityQueue<>((a,b)->a.createdAt-b.createdAt);
        Set<Integer> users = followed.get(userId);
        if(users!= null){
            for(int user: users){
                List<Tweet> listOfTweets = tweets.get(user);
                if(listOfTweets!=null){
                    
                    for(Tweet t : listOfTweets){
                        pq.add(t);
                    if(pq.size()>10){
                        pq.poll(); 
                    }
                   
                    }
                }
                
            }
        }
        
        List<Integer> result = new ArrayList<>();
        while(!pq.isEmpty())
            result.add(0,pq.poll().tweetId);
        return result;
    }
    
    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */
    public void follow(int followerId, int followeeId) {
        
        if(!followed.containsKey(followerId))
        followed.put(followerId,new HashSet<>());
        
        followed.get(followerId).add(followeeId);
        
    }
    
    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
    public void unfollow(int followerId, int followeeId) {
        
        if(followed.containsKey(followerId) && followerId!=followeeId)      
            //because we  are adding our own follwerId in the map
            followed.get(followerId).remove(followeeId);
        
    }
}

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter obj = new Twitter();
 * obj.postTweet(userId,tweetId);
 * List<Integer> param_2 = obj.getNewsFeed(userId);
 * obj.follow(followerId,followeeId);
 * obj.unfollow(followerId,followeeId);
 */