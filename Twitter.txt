/**
Time Complexity - N log k where k = 10 (# of tweets in news feed)
Space Complexity - O(N)
 */
class Twitter {

    Map<Integer, Set<Integer>> userFollowMap;
    Map<Integer, List<Tweet>> tweetsMap;
    private int time;

    class Tweet {
        int tweetId;
        int time;
        public Tweet(int tid, int time) {
            this.tweetId = tid;
            this.time = time;
        }
    }
   

    public Twitter() {
        this.userFollowMap = new HashMap<>();
        this.tweetsMap = new HashMap<>();
        this.time = 0;
    }
    
    public void postTweet(int userId, int tweetId) {
        if (!tweetsMap.containsKey(userId)) {
            tweetsMap.put(userId, new ArrayList<>());
            follow(userId, userId);
        }
        tweetsMap.get(userId).add(new Tweet(tweetId, time+1));
    }
    
    public List<Integer> getNewsFeed(int userId) {
        PriorityQueue<Tweet> pq = new PriorityQueue<>((a,b) -> a.time - b.time);
        Set<Integer> followedMap = userFollowMap.get(userId);
        if (followedMap != null) {
            for (Integer followedUser : followedMap) {
                List<Tweet> tweets = tweetsMap.get(followedUser);
                if (tweets != null) {
                    for (Tweet t : tweets) {
                        pq.add(t);
                        if (pq.size() > 10) {
                            pq.remove();
                        }
                    }
                }
            }
        }
        List<Integer> results = new ArrayList<>();
        while (!pq.isEmpty()) {
            results.add(0, pq.poll().tweetId);
        }
        return results;
    }
    
    public void follow(int followerId, int followeeId) {
        if (!userFollowMap.containsKey(followerId)) {
            userFollowMap.put(followerId, new HashSet<>());
            userFollowMap.get(followerId).add(followerId);
        }
        userFollowMap.get(followerId).add(followeeId);
    }
    
    public void unfollow(int followerId, int followeeId) {
        if (userFollowMap.containsKey(followerId)) {
            userFollowMap.get(followerId).remove(followeeId);
        }
    }
}

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter obj = new Twitter();
 * obj.postTweet(userId,tweetId);
 * List<Integer> param_2 = obj.getNewsFeed(userId);
 * obj.follow(followerId,followeeId);
 * obj.unfollow(followerId,followeeId);
 */
