//tc: O(n)
//sc: O(n)
//passed on leetcode: yes
class SkipIterator implements Iterator<Integer> {
        Iterator<Integer> itr;
        HashMap<Integer,Integer> skipMap;
        Integer nextEl;
	public SkipIterator(Iterator<Integer> it) {
        this.itr = it;
        skipMap = new HashMap<>();
        advance();
    }

	public boolean hasNext() {
        return nextEl != null;
	}

	public Integer next() {
        Integer temp = nextEl;
        advance();
        return temp;
	}

	/**
	* The input parameter is an int, indicating that the next element equals 'val' needs to be skipped.
	* This method can be called multiple times in a row. skip(5), skip(5) means that the next two 5s should be skipped.
	*/ 
	public void skip(int val) {
        if (nextEl == val) {
            advance();
        }
        else {
            skipMap.put(val, skipMap.getOrDefault(val, 0) + 1); 
        }
	}
    
    private void advance(){
        nextEl = null;
        while (itr.hasNext() && nextEl ==null) {
            Integer el = itr.next();
            // is it in skip (invalid)
            if (skipMap.containsKey(el)) {
                skipMap.put(el, skipMap.get(el) - 1);
                skipMap.remove(el, 0);
            }
            else {
                nextEl = el;
            }
        }
    }
    
   public static void main(String[] args) {

        SkipIterator it = new SkipIterator(Arrays.asList(5,6,7,5,6,8,9,5,5,6).iterator());

         System.out.println(it.hasNext());
         it.skip(6);// 6 --nextEl
        it.skip(5);// 6
         System.out.println(it.next()); //7
         it.skip(5);
             System.out.println(it.next());// 6
             System.out.println(it.next()); // 8
          it.skip(5);
        it.skip(8);
             
        System.out.println(it.next());
             
         System.out.println(it.next());
         System.out.println(it.next());
         System.out.println(it.next());
         // it.skip(1);

//          it.skip(3);

         System.out.println(it.hasNext());

     }

}
